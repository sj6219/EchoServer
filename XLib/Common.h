#pragma once

// (struct) /////////////////////////////////////////////////////////
struct DATE_TIME
{
	int year;
	int month;
	int day;
	int hour;
	int minute;
	int second;
};

struct QUESTTASK
{
	int nQuest;
	int nStep;
	int nTask;
};

struct TELEPORT
{
	int nMap;
	POINT ptP;
	int nZ;
	int nDir;
	int nInsId;
	TELEPORT() : nMap(0), nZ(0), nDir(0), nInsId(0) 
	{
		ptP.x = ptP.y = 0;
	}
	TELEPORT(int nMap_) : nMap(nMap_), nZ(0), nDir(0), nInsId(0) 	
	{
		ptP.x = ptP.y = 0;
	}
	TELEPORT(int nMap_, POINT ptP_, int nZ_ = 0, int nDir_ = 0, int nInsId_ = 0) : nMap(nMap_), ptP(ptP_), nZ(nZ_), nDir(nDir_), nInsId(nInsId_) {}
};

// (define) /////////////////////////////////////////////////////////
// General
#define XVER(xver) (xver == g_nExVersion)
#define XVERMASK(xmask) (xmask & (1 << g_nExVersion))

#define MAIL_FEE 10

// Tile Define
#define MAP_TILE_NUM		256
#define MAP_TILE_SHIFT		8	// shift Map to Tile

#define LOCK_TILE_NUM		16
#define LOCK_TILE_SHIFT		4	// shift Lock to Tile

#define TILE_PIXEL_NUM		32
#define TILE_PIXEL_SHIFT	5	// shift Tile to Pixel

#define QTILE_PIXEL_NUM		16
#define QTILE_PIXEL_SHIFT	4	// shift 1/4 Tile to Pixel

#define HTILE_PIXEL_NUM		8
#define HTILE_PIXEL_SHIFT	3	// shift 1/16 Tile to Pixel

#define TILE_QTILE_NUM		2
#define TILE_QTILE_SHIFT	1	// shift Tile to 1/4 Tile

#define TILE_HTILE_NUM		4
#define TILE_HTILE_SHIFT	2	// shift Tile to 1/16 Tile

#define SIGHT_RADIUS		25	// tile unit
#define MAX_TILE			16384	// MAX_MAP_NUM * MAP_TILE_NUM

// Inventory Volume
#define SLOT_BASE			30
#define SLOT_BASE_EX		90
#define SLOT_WEAR			14
#define SLOT_MONEY			1
#define SLOT_TRADE			12
#define SLOT_STORAGE		12
#define SLOT_MAIL			2
#define SLOT_AUCTION		1

// Maximum
#define MAX_CHARACTER		3
#define MAX_LOAD_CHARACTER	9
#define MAX_NUM				0x7fffffff
#define MAX_FRIEND			50
#define MAX_QUEST			20
#define MAX_MAIL			50
#define MAX_ITEM_BASE		(SLOT_BASE + SLOT_BASE_EX + SLOT_WEAR + SLOT_MONEY)
#define MAX_ITEM_STORAGE	(SLOT_STORAGE * 5)
#define MAX_ITEM			(MAX_ITEM_BASE + MAX_ITEM_STORAGE)
#define MAX_BUYBACK			14
#define MAX_COOLDOWN		16
#define MAX_COLOR_LEVEL		7
#define MAX_NXSHOP_CARTITEM	10
#define MAX_NXSHOP_PER_ITEM	10
#define MAX_PARTYMEMBER		8
#define MAX_CHAOSMEMBER		6

// Length
#define LEN_ID				32
#define LEN_PWD				16
#define LEN_ACCOUNT			16
#define LEN_NAME			24
#define LEN_PCNAME			16
#define LEN_NEWPCNAME		14
#define LEN_GUILDNAME		16
#define LEN_NEWGUILDNAME	14
#define LEN_ITEMNAME		30
#define LEN_FILENAME		20
#define LEN_PATH			128
#define LEN_CHAT			128
#define LEN_NOTICE			512
#define LEN_COOKIE			256
#define LEN_TITLE			16
#define LEN_MSG				100
#define LEN_QUESTTITLE		30
#define LEN_SHORTCUT		192	// 48 * 4
#define LEN_GUILDICON		512 // 16 * 16 * 2Byte per pixel
#define LEN_PASSPORT		4096
#define LEN_IP				15
#define LEN_NX_COUPON		35
#define LEN_SEARCH			32
#define LEN_GUILD_FORTUNE	50	// 오늘의 한마디
#define LEN_GUILD_ALIAS		6	// 등급별 호칭
#define LEN_CLIENTLOG		512
#define LEN_DATE			32


// Character General State
#define CGS_DEAD				0x0000000000000001	// 0
#define CGS_REST				0x0000000000000002
#define CGS_DRAW				0x0000000000000004
#define CGS_COMBAT				0x0000000000000008
#define CGS_HASLOOT				0x0000000000000010
#define CGS_LOOTING				0x0000000000000020
#define CGS_HIDDEN				0x0000000000000040
#define CGS_CANEQUIPRIFLE		0x0000000000000080
#define CGS_MOVEHALT			0x0000000000000100
#define CGS_LOOTROLL			0x0000000000000200
#define CGS_FLY					0x0000000000000400	// 10
#define CGS_AGGRESSIVE			0x0000000000000800
#define CGS_ONAISCRIPT			0x0000000000001000
#define CGS_HELPFRIEND			0x0000000000002000
#define CGS_GM					0x0000000000004000
#define CGS_SHOULDBEDELETED		0x0000000000008000
#define CGS_BALLOON_GM			0x0000000000010000
#define CGS_OPEN				0x0000000000020000
#define CGS_BOUND				0x0000000000040000
#define CGS_IMMUNETODAMAGE		0x0000000000080000
#define CGS_COMPLETE_DISAPPEAR	0x0000000000100000	// 20
#ifdef _NEW_SKILL
#define CGS_WILD_RUSH			0x0000000000200000
#define CGS_WEDGE_BULLET_FROM	0x0000000000400000
#define CGS_WEDGE_BULLET_TO		0x0000000000800000
#define CGS_VICIOUS_EPIDEMIC	0x0000000001000000
#endif

// Character Magic State
#define CMS_INVISIBLE		    0x0000000000000001	// 0
#define CMS_RINGRING		    0x0000000000000002
#define CMS_EARTHTREMOR_FROM    0x0000000000000004
#define CMS_EARTHTREMOR_TO	    0x0000000000000008
#define CMS_EVADEEMISSION		0x0000000000000010
#define CMS_INTENSIVEFIRE		0x0000000000000020
#define CMS_TINYBLASTING		0x0000000000000040
#define CMS_TURBO				0x0000000000000080
#define CMS_NPCSLOW				0x0000000000000100
#define CMS_OFFENSIVEEMISSION	0x0000000000000200
#define CMS_PROVOKE				0x0000000000000400 // 10
#define CMS_HOLLYDOMINATION		0x0000000000000800
#define CMS_INVISIBLEMINE		0x0000000000001000
#define CMS_ADRENALINACCELERATION 0x0000000000002000
#define CMS_SHADOWSTEP          0x0000000000004000
#define CMS_IMPRECATION         0x0000000000008000
#define CMS_BRIGHTNESS          0x0000000000010000
#define CMS_ISOLATION           0x0000000000020000
#define CMS_ATTENTION           0x0000000000040000
#define CMS_FREEZESHIELD_FROM   0x0000000000080000
#define CMS_FREEZESHIELD_TO     0x0000000000100000 // 20
#define CMS_ANGRYCLAW		    0x0000000000200000
#define CMS_VETERANMOVEMENT     0x0000000000400000
#define CMS_VIOLENTBILLOW       0x0000000000800000
#define CMS_IRONCURTAIN         0x0000000001000000
#define CMS_SPIRITCONQUEST      0x0000000002000000
#define CMS_WARP				0x0000000004000000
#define CMS_DIVINEGRACE_FROM	0x0000000008000000
#define CMS_DIVINEGRACE_TO		0x0000000010000000
#define CMS_BLOCKADE_FROM		0x0000000020000000
#define CMS_BLOCKADE_TO			0x0000000040000000 // 30
#define CMS_PCBANG_EVENT_HP		0x0000000080000000
#define CMS_SITDOWN_SHOT		0x0000000100000000
#define CMS_IDEALEVASION		0x0000000200000000
#define CMS_BLESSINGHEAVEN		0x0000000400000000
#define CMS_SCRAMBLE_CORE		0x0000000800000000
#define CMS_POTION_PP			0x0000001000000000
#define CMS_POTION_SP			0x0000002000000000
#define CMS_SCRAMBLE_FLAG		0x0000004000000000
#define CMS_START_SAFE			0x0000008000000000
#define CMS_PCBANG_PREMIUM   	0x0000010000000000	// 40
#define CMS_EVENT_EXP_20	    0x0000020000000000
#define CMS_PAY_ITEM_EXP_20	    0x0000040000000000
#define CMS_PAY_ITEM_MONEY_20   0x0000080000000000
#define CMS_PAY_ITEM_RKP_30     0x0000100000000000
#define CMS_SCAN_INVISIBLE      0x0000200000000000
#define CMS_CRITICAL_PER_8      0x0000400000000000
#define CMS_ABSORB_DAMAGE		0x0000800000000000
#define CMS_CRITICAL_MASTERY	0x0001000000000000
#define CMS_ARENA_TRANSMITTER	0x0002000000000000
#define CMS_GUILD_1				0x0004000000000000	// 50
#define CMS_GUILD_2				0x0008000000000000
#define CMS_GUILD_3				0x0010000000000000
#define CMS_GUILD_4				0x0020000000000000
#define CMS_NEWBIE				0x0040000000000000
#define CMS_NEWBIE_POINT		0x0080000000000000
#define CMS_FATAL_WOUND			0x0100000000000000
#define CMS_FATAL_POISON		0x0200000000000000
#define CMS_POISON_GAS			0x0400000000000000
#define CMS_STUN_ALTERNATIVE	0x0800000000000000
#define CMS_ANTI_ARMOR			0x1000000000000000	// 60
#define CMS_GROGGY				0x2000000000000000
#define CMS_PREVENTION_CASTING	0x4000000000000000
#ifdef _NEW_SKILL
#define CMS_HOLLY_SHIELD		0x8000000000000000
#endif

#define CMS_INVIS_ALL           (CMS_INVISIBLEMINE | CMS_SHADOWSTEP | CMS_WARP)
#define CMS_SCRAMBLE_OCCUPY		(CMS_SCRAMBLE_FLAG | CMS_SCRAMBLE_CORE)

#define CMS_CANNOTMOVE			(CMS_STUN_ALTERNATIVE | CMS_GROGGY)
#define CMS_CANNOTSKILL			(CMS_STUN_ALTERNATIVE | CMS_GROGGY)
#define CMS_CANNOTACTION		(CMS_STUN_ALTERNATIVE | CMS_GROGGY)

// Character Buff State
#define CBS_OVERDAMAGE			0x0000000000000001	// 0
#define CBS_GAZE    			0x0000000000000002
#define CBS_STUN    			0x0000000000000004
#define CBS_SELFSAFER			0x0000000000000008
#define CBS_GUARDAURA			0x0000000000000010
#define CBS_FILLAURA			0x0000000000000020
#define CBS_PROTECT_FROM	 	0x0000000000000040 //건사람
#define CBS_PROTECT_TO			0x0000000000000080 //받는사람
#define CBS_IRONWALL			0x0000000000000100
#define CBS_PROTECTION			0x0000000000000200
#define CBS_WHILWIND			0x0000000000000400	// 10
#define CBS_DASH    			0x0000000000000800
#define CBS_ENERVATION			0x0000000000001000
#define CBS_CAPTURE				0x0000000000002000
#define CBS_BLANKCART			0x0000000000004000
#define CBS_INTENSEFIRE			0x0000000000008000
#define CBS_SWIFT				0x0000000000010000
#define CBS_MOVEUP				0x0000000000020000
#define CBS_FREEZEAURA			0x0000000000040000
#define CBS_AVOIDEYES			0x0000000000080000
#define CBS_SHELTER				0x0000000000100000	// 20
#define CBS_PROVISION			0x0000000000200000
//stopdoghole
//#define CBS_DH_DEAD	    		0x0000000000400000
//#define CBS_DH_TOPRANK			0x0000000000800000
//#define CBS_LTBALL_150			0x0000000001000000
//#define CBS_LTBALL_175			0x0000000002000000
//#define CBS_LTBALL_200			0x0000000004000000
//#define CBS_DH_GROUP1			0x0000000008000000
//#define CBS_DH_GROUP2			0x0000000010000000
//#define CBS_DH_GROUP3			0x0000000020000000
#define CBS_BULLETWOUND			0x0000000040000000	// 30
#define CBS_MAZE				0x0000000080000000
#define CBS_ROOT				0x0000000100000000
#define CBS_CAMOUFLAGE_BUSH		0x0000000200000000
#define CBS_CAMOUFLAGE_DUSTBIN	0x0000000400000000
#define CBS_CAMOUFLAGE_BOX		0x0000000800000000
#define CBS_CAUTION				0x0000001000000000
#define CBS_SNATCH		    	0x0000002000000000
#define CBS_LASTDITCH	     	0x0000004000000000
#define CBS_THIRSTBLOOD_FROM   	0x0000008000000000
#define CBS_ANTICASTING	     	0x0000010000000000	// 40
#define CBS_FLASHBANG	     	0x0000020000000000
#define CBS_THIRSTBLOOD_TO		0x0000040000000000
#define CBS_POTION_HP			0x0000080000000000
#define CBS_DEATH				0x0000100000000000
#define CBS_RIDING				0x0000200000000000
#define CBS_KILLLINE			0x0000400000000000
#define CBS_POISONQUEEN			0x0000800000000000
#define CBS_SPIDERQUEEN			0x0001000000000000
#define CBS_HEAL				0x0002000000000000
#define CBS_ANTIASSAULT			0x0004000000000000	// 50
#define CBS_NOBLESACRIFICE		0x0008000000000000
#define CBS_NOBLESACRIFICE_DE	0x0010000000000000
#define CBS_THORNS		     	0x0020000000000000
#define CBS_PARY                0x0040000000000000
#define CBS_ACMLT_PT            0x0080000000000000 // cbs_shout -> cbs_acmlt_pt accumulation point
#define CBS_SPINBUTCHER		    0x0100000000000000
#define CBS_REVIVALSEQUELA      0x0200000000000000
#define CBS_SHADOWGREEP_FROM    0x0400000000000000
#define CBS_SHADOWGREEP_TO      0x0800000000000000
#define CBS_ENRAGE			    0x1000000000000000 // 60
#define CBS_GUARDIANEMISSION    0x2000000000000000
#define CBS_WRATHBLASTING       0x4000000000000000
#define CBS_BURNINGWEAPON       0x8000000000000000

#define CBS_CAMOU				(CBS_CAMOUFLAGE_BUSH | CBS_CAMOUFLAGE_DUSTBIN | CBS_CAMOUFLAGE_BOX)
#define CBS_LTBALL				(CBS_LTBALL_150 | CBS_LTBALL_175 | CBS_LTBALL_200)
#define CBS_DH_GROUP			(CBS_DH_GROUP1 | CBS_DH_GROUP2 | CBS_DH_GROUP3)
#define CBS_CANNOTMOVE			(CBS_STUN | CBS_CAPTURE | CBS_MAZE | CBS_ROOT | CBS_SPIDERQUEEN | CBS_SHADOWGREEP_TO)
#define CBS_CANNOTSKILL			(CBS_STUN | CBS_MAZE | CBS_SHADOWGREEP_TO)
#define CBS_CANNOTACTION		(CBS_STUN | CBS_MAZE | CBS_SHADOWGREEP_TO)
#define CBS_FORCE_MOVE			(CBS_BLANKCART | CBS_WHILWIND | CBS_SNATCH | CBS_DASH)
#define CBS_ACTIONCANCEL		(CBS_FILLAURA | CBS_CAMOU | CBS_KILLLINE | CBS_SHADOWGREEP_FROM)
#define CBS_BUFF_EVENT          (CBS_PROTECT_TO | CBS_SELFSAFER | CBS_GUARDAURA | CBS_SHELTER | CBS_PROVISION | CBS_ANTIASSAULT | CBS_LASTDITCH)
#define CBS_THIRSTBLOOD         (CBS_THIRSTBLOOD_FROM | CBS_THIRSTBLOOD_TO)

// Character System State
#define CSS_ASKRESTART				0x00000001	// 0
#define CSS_FORCEDTELEPORT			0x00000002
#define CSS_SUMMONED				0x00000004
#define CSS_CASTING					0x00000008
#define CSS_REFRESHDELAY			0x00000010
#define CSS_ONDUEL					0x00000020
#define CSS_ACMLT_PT_DAMAGE			0x00000040
#define CSS_ACMLT_PT_ASSAULT		0x00000080
#define CSS_GOLDCOLLECTOR			0x00000100
#define CSS_TELEPORTING				0x00000200
#define CSS_STOPSKILL				0x00000400	// 10
#define CSS_MINEUPGRADE				0x00000800
#define CSS_STEALLOOTING			0x00001000
#define CSS_INVIS_SAFE				0x00002000
#define CSS_TRADE					0x00004000
#define CSS_AUCTION					0x00008000
#define CSS_MAIL					0x00010000
#define CSS_TEL_CANCELBUFF_DEATH	0x00020000
#define CSS_ENCHANT_RIFMT_1       	0x00040000
#define CSS_ENCHANT_PROBUP      	0x00080000
#define CSS_EXP_RESTORE         	0x00100000	// 20
#define CSS_EXPLOSION_MASTER       	0x00200000
#define CSS_ENCHANT_RIFMT_2       	0x00400000
#define CSS_DISILLUSION				0x00800000
#ifdef _NEW_SKILL
#define CSS_WILD_RUSH				0x01000000
#define CSS_SNIPER_TRAIN			0x02000000
#endif

#define CSS_ENCHANT_RIFMT       	(CSS_ENCHANT_RIFMT_1 | CSS_ENCHANT_RIFMT_2)

// Tile Attribute Type
#define TA_VILLAGE	0x00010000
#define TA_SAFE		0x00020000
#define TA_PORTAL	0x00040000
#define TA_TRIGGER	0x00080000
#define TA_OBSTACLE	0x00100000

// power value
#define POW20 400
#define POW32 1024
#define POW40 1600
#define POW64 4096
#define POW90 8100
#define POW96 9216
#define POW160 25600
#define POW300 90000
#define POW480 230400
#define POW640 409600
#define POW800 640000

#define SECS_PER_MIN (60)
#define SECS_PER_HOUR (60*60)
#define SECS_PER_DAY (24*60*60)

#define AUCTION_SEARCH_CYCLE 10000
#define AUCTION_REG_MAX 6
#define AUCTION_PAGE_ARTICLE 30

//manager
#define AUCTION_MANAGER 0xffffffff
#define GUILD_MANAGER 0xfffffffe
#define RECOVERY_MANAGER 0xfffffffd
#define SP1_MANAGER RECOVERY_MANAGER

static const DWORD MSEC_PER_SEC = 1000;
static const DWORD MSEC_PER_MIN = 60 * 1000;
static const DWORD MSEC_PER_HOUR = 3600 * 1000;
static const DWORD MSEC_PER_DAY = 24 * 3600 * 1000;
static const DWORD MSEC_PER_WEEK = 7 * 24 * 3600 * 1000;

// (enum) /////////////////////////////////////////////////////////
enum NPC_SBIT
{
	NSB_CREATE_ANI,
	NSB_CREATE_CHEAT,
};

enum MAP_ENV
{
	ME_DEFAULT,
	ME_QUEENZLAB_POWERON,
	ME_RAIN,
	ME_SNOW,
	ME_SANDWIND,
	ME_SCRAMBLE_1,
	ME_SCRAMBLE_2,
	ME_SCRAMBLE_3,
	ME_SCRAMBLE_4,
	ME_SCRAMBLE_5,
};

enum PLAYER_INFO
{
	PI_PROLOGUE,
	PI_DELETED,
	PI_PASSWORD,
	PI_PASSINIT,
	PI_BLOCK,
	PI_INIT_SPEC,
	PI_END,

	PIF_PROLOGUE = 1 << PI_PROLOGUE,
	PIF_DELETED = 1 << PI_DELETED,
	PIF_PASSWORD = 1 << PI_PASSWORD,
	PIF_PASSINIT = 1 << PI_PASSINIT,
	PIF_BLOCK = 1 << PI_BLOCK,
	PIF_INIT_SPEC = 1 << PI_INIT_SPEC,
};

enum MINIGAME_PROTOCOL
{
	MGP_SAVESCORE,
	MGP_TOPSCORE,
};

enum MINIGAME_ID
{
	MGID_JEWELRY = 1,
	MGID_BALLOON = 2,
	MGID_MAX,
};

enum CHAOSSTAGE_PROTOCOL
{
	CSP_ENTER,
	CSP_RANKING,
	CSP_START,
	CSP_GIVEUP,
	CSP_SAVE,
};

enum EVENT_INDEX
{
	EI_NIL,
	EI_OBTGIFT,
	EI_PCBANGCOUPON,
	EI_ANN_POTION,
	EI_USER_RETURN,
	EI_DRS_LUCKYBOX,
	EI_HALLOWEENBOX,
};

enum EVENT_PROTOCOL
{
	EP_GETSTATUS,
	EP_UPDATESTATUS,
	EP_RESETSTATUS,
};

enum NS_PROTOCOL
{
	NSP_LOAD_INVEN,
	NSP_READ_GOODS,
	NSP_PICKUP_GOODS,
	NSP_PICKUP_GOODS_ERROR,
	NSP_PICKUP_ROLLBACK,
	NSP_COUPON_INQUIRY,
	NSP_COUPON_USING,
	NSP_CHECK_BALANCE,
	NSP_PURCHASE_ITEM,
	NSP_PURCHASE_GIFT,
	NSP_CATEGORY_INQUIRY,
	NSP_EVENT_REGIST,
	NSP_PRODUCT_INQUIRY,
	NSP_PRODUCT_REFRESH,
	NSP_CHECK_GIFTNAME,
	NSP_ERROR,
	NSP_ERROR_BUYLIMIT,
	NSP_PICKUP_GOODS_ONCE,
};

enum NXA_RESULT
{
	// result
	NXAR_FORBIDDEN = 0,
	NXAR_ALLOWED,
	NXAR_TRIAL,
	NXAR_TERMINATE,
	NXAR_MESSAGE,
};

enum NXA_OPTION
{
	// option
	NXAO_NIL = 0,
	NXAO_ADDR_NOTALLOWED,
	NXAO_ADDR_MAXCONNECTED,
	NXAO_ADDR_EXPIRED,
	NXAO_ID_NOTALLOWED,
	NXAO_ID_MAXCONNECTED,
	NXAO_ID_EXPIRED,
	NXAO_NETDIRECTRECOMMENDATION,
	NXAO_DOUBLEBOOKING,
	NXAO_DOUBLECOUPON,
	NXAO_WELCOME_ID,
	NXAO_WELCOME_ADDR,
	NXAO_WELCOME_NETDIRECT,
	NXAO_WELCOME_TRIAL,
	NXAO_WELCOME_COUPON,
	NXAO_COUPON_EXPIRED,
	NXAO_COUPON_EXHAUSTED,
	NXAO_WELCOME_PREPAID,
	NXAO_PREPAID_EXPIRED,
	NXAO_PREPAID_EXHAUSTED,
	NXAO_TRIAL_EXPIRED,
	NXAO_PREPAID_UPDATE,
	NXAO_WELCOME_LANINFO,
	NXAO_ID_NOTAVAILABLETIME,
	NXAO_ID_NOTWEEKEND,
	NXAO_SINGLEPLAY_EXHAUSTED,
	NXAO_WELCOME_SINGLEPLAY,

	NXAO_POSSIBLECAFE_CANUSEUSER = 90,
	NXAO_POSSIBLECAFE_USEDUSER,
	NXAO_POSSIBLECAFE_ABSENCEUSER,
	NXAO_IMPOSSIBLECAFE_CANUSEUSER,
	NXAO_IMPOSSIBLECAFE_ABSENCEUSER,
	NXAO_IMPOSSIBLECAFE_USEDUSER,
};

enum GO_TYPE
{
	GO_STAND = 1,
	GO_WALK,
	GO_RUN,
	GO_BACKWALK,
	GO_AVOID,	
	GO_GETWEAPON,
	GO_LOOT,
	GO_SKILL,
	GO_DAMAGE,
	GO_DIE,
	GO_JUMP,
	GO_ROTATE,
	GO_CAST,
	GO_REST,
	GO_ATTACKFAIL,
	GO_ITEMCAST,
	GO_BIKETURBO,

	GO_REACTION	= 23,
	GO_RANDOM_IDLE,
	GO_ENTRY,
	GO_HIDE,
	GO_FLY,
	GO_LANDING,
	GO_OPEN,

	GO_ANIMATION = 2002,
};

enum STATE_TYPE
{
	ST_BS1 = 1,
	ST_BS2,
	ST_BS3,
	ST_GS,
	ST_MS,
	ST_SS,
};

enum MAIL_BIT
{
	MB_TEMP = 0x0001,
	MB_READ = 0x0002,
};

enum AUCTION_PROTOCOL
{
	AP_LOAD,
	AP_REGISTER,
	AP_BID,
	AP_CANCEL_REG,
	AP_EXPIRED,
	AP_STATUS_REG,
	AP_STATUS_BID,
	AP_SEARCH,
	AP_ARTICLE,
	AP_BUY,
	AP_SENDMAIL_SUCCESS,
	AP_BID_SUCCESS,
	AP_BID_FAIL,
	AP_WINDOW_CLOSE,
	AP_CANCEL_REG_SUCCESS,
};

enum MAIL_PROTOCOL
{
	MP_INSERT,
	MP_DELETE,
	MP_IDENTIFY,
	MP_IDENTIFY_FAIL,
	MP_EXCESSLIMIT,
	MP_READYTOSEND,
	MP_SEND,
	MP_RECEIVE,
	MP_SEND_SUCCESS,
	MP_SEND_FAIL,
	MP_RECEIVE_CONFIRM,
	MP_RECEIVE_CANCEL,
	MP_PARCEL_UNPACK,
	MP_WINDOW_CLOSE,
	MP_OPEN_MSG,
	MP_UPDATE_MAILBIT,
	MP_PARCEL_UNPACK_FAIL,
};


enum GUILD_PROTOCOL_DB
{
	GPD_CREATE,			// 창설
	GPD_PURGE,			// 추방
	GPD_MANDATE,			// 권한위임? 특정 등급의 명칭이나 권한을 바꾼다
	GPD_DISMISS,			// 해산
	GPD_LEVEL,			// 레벨업
	GPD_AUTHORITY,		// 등급설정	? 특정 길드원의 등급을 지정한다.
	GPD_FORTUNE,			// 길드 메시지 
	GPD_REGISTER_IMAGE,	// 마크등록
	GPD_LOAD,
	GPD_GP_SET,				// 길드 포인트
	GPD_SENDMAIL_SUCCESS,
	GPD_GP_ADD,				// 길드 포인트
	GPD_GP_SUB,				// 길드 포인트
	GPD_NP_SET,				// 뉴비 포인트
	GPD_NP_ADD,				// 뉴비 포인트
	GPD_NP_SUB,				// 뉴비 포인트
};

enum GUILD_PROTOCOL_DB_PID
{
	GPP_PURGE,			// 추방
	GPP_AUTHORITY,		// 등급설정	? 특정 길드원의 등급을 지정한다.
};

enum GUILD_PROTOCOL
{
	GP_INFO,			// 길드 정보
	GP_MEMBER,			// 길드원 정보
	GP_CREATE,			// 창설
	GP_JOIN,			// 참가
	GP_PURGE,			// 추방
	GP_MANDATE,			// 권한위임? 특정 등급의 명칭이나 권한을 바꾼다
	GP_DISMISS,			// 해산
	GP_QUIT,			// 탈퇴
	GP_LEVEL,			// 레벨업
	GP_LOAD_IMAGE,		// 마크받아오기
	GP_PENALTY,			// 임의 탈퇴시 재가입불가 페널티 정보 알림
	GP_AUTHORITY,		// 등급설정	? 특정 길드원의 등급을 지정한다.
	GP_FORTUNE,			// 길드 메시지 
	GP_LOGOUT,			// 길드원 로그아웃
	GP_REGISTER_IMAGE,	// 마크등록
	GP_REFRESH_INFO,	// 길드원외 유저들에게 길드ID, 길드마크 정보가 바뀌었음을 알림
	GP_MEMBER_PARTY,	// 길드원 정보(파티만)
	GP_MEMBER_MAP,		// 길드원 정보(맵정보만)
	GP_JOIN_OTHER,		// 다른 길드원 참가 성공시 서버->클라이언트로
	GP_INFO_GP,			// 길드 정보(GP)
	GP_MEMBER_LEV,			// 길드원 정보(레벨만)
	GP_INFO_UWID,			// 길드 정보(UWID)
	GP_INFO_NP,			// 길드 정보(NP)
	GP_NB_BUFF,			// 뉴비 버프 사용/중단
};

enum GUILD_RANK
{
	GR_NEWBIE = 0,	// 신입
	GR_NORMAL,		// 일반
	GR_MANIAC,		// 우수
	GR_MANAGER,		// 길드관리자
	GR_MASTER,		// 길드마스터
	GR_END,
};

enum GUILD_KIND
{
	GK_DEFAULT = 0, // 기본
	GK_BATTLE,
	GK_CRAFT,
	GK_END,
	GK_INVALID = 255
};

enum BEHAVIOR_CODE
{
	B_DEAD,
	B_RESURRECTION,
	B_DRAW,
	B_SHEATHE,
	B_STOPCOMBAT,
};

enum ATTACK_TYPE
{
	AT_NIL,
	AT_MELEE,
	AT_RANGED,
	AT_AURA,
};

enum HIT_TYPE
{
	HT_NIL,
	HT_MELEE = AT_MELEE,
	HT_RANGED = AT_RANGED,
	HT_AURA = AT_AURA,
	HT_FREE,
};

enum DEFENSE_TYPE
{
	DT_NIL,
	DT_DEFEND,
	DT_DODGE,
	DT_RESIST,
	DT_FREE,
};

enum ATTRIBUTE_TYPE
{
	A_STR,
	A_AGI,
	A_CON,
	A_HTH,
	A_STA,
	A_AUR,
	A_HP,
	A_PP,
	A_SP,
	A_HIT,
	A_DODGE,
	A_MELEE_DMG,
	A_MELEE_MINDMG,
	A_MELEE_MAXDMG,
	A_MELEE_AC,
	A_RANGE_DMG,
	A_RANGE_MINDMG,
	A_RANGE_MAXDMG,
	A_RANGE_AC,
	A_AURA_DMG,
	A_AURA_MINDMG,
	A_AURA_MAXDMG,
	A_AURA_AC,
	A_LEVEL,
	A_EXP,
	A_CURHP,
	A_CURPP,
	A_CURSP,
	A_FATAL,
	A_MOVERATE,
	A_MAXWEIGHT,
	A_ATTACKRATE,
	A_RKP,
	A_RKLEVEL,	
	A_AC,
	A_RIDERATE,
	A_BLOCK,
	A_DODGE_MELEE,
	A_DODGE_RANGE,
	A_DODGE_AURA,
	A_PVP_DMG,
	A_PVP_DMG_AC,
	A_DMG,
	A_AUTOHP,
	A_MOVEBACKRATE,
	A_ACMLT_ADD,
	A_PKP,
#ifdef _NEW_SKILL
	A_ADD_DMG,
#endif
};

enum PC_CLASS
{
	PC_NIL,
	PC_DETECTIVE,
	PC_GANGSTER,
	PC_SALARYMAN,
	PC_PRESS,
	PC_ACTRESS,
	PC_GIPSY,
};

enum CHAR_RACE
{
	R_NIL,
	R_HUMAN,
	R_IMMORTAL,
	R_BUG,
	R_BEAST,
	R_MACHINE,
	R_BIOMACHINE,
	R_MAPOBJECT,
	R_PHONEBOOTH,
	R_MAILBOX,
	R_CREATURE,
	R_OILER,
	R_UNDEAD,
	R_SAFE,
	R_TERMINAL,
};

enum CHAR_FACTION
{
	F_NIL,
	F_ACON,
	F_GUNNAR,
	F_RAMPHASY,
	F_NOCTUNE,
	F_NRB,
	F_UNION,
	F_LIONS,
	F_PROTESTANT,
	F_CREATURE,
	F_GUSFELT,
};

enum NPC_CLASS
{
// high class
	NHC_NIL,
	NHC_NPC,
	NHC_MONSTER,
	NHC_COLLECT,
	NHC_OBJECT,
	NHC_RESERVED01,
	NHC_RESERVED02,
	NHC_RESERVED03,
	NHC_RESERVED04,
	NHC_RESERVED05,
// low class
	NLC_NIL = 0,
	// general
	NLC_MERCHANT,
	NLC_TRAINER,
	NLC_GOSSIP,
	NLC_QUEST,
	NLC_BANK,
	NLC_AUCTION,
	NLC_LTBALL,
	NLC_ETC,
	NLC_OFFICIAL,
	NLC_RESERVED04,
	NLC_RESERVED05,
	// monster
	NLC_MONSTER,
	NLC_TRANSMITTER,
	NLC_MAGIC,
	NLC_CHASEBOMB,
	NLC_SPLASHMINE,
	NLC_BINDMINE,
	NLC_BOSS,
	NLC_BOOMBUG,
	// collect
	NLC_CHEST,
	NLC_MINERAL,
	NLC_PLANT,
	NLC_HERB,
	NLC_QUESTLOOT,
	NLC_CHESTONCE,
	NLC_RESERVED13,
	NLC_RESERVED14,
	NLC_RESERVED15,
	// object
	NLC_DOOR,
	NLC_LEVER,
	NLC_OBJECT,
	NLC_EXPLOSIVE,
	NLC_WINDOW,
	NLC_BUTTON,
	NLC_DOORAUTO,
	NLC_WALL,
	NLC_FLAG,
	NLC_HEART,
	NLC_GRATE_OPEN,
	NLC_CORPSE,
	NLC_GRATE_CLOSED,
	NLC_HEALER,
#ifdef _NEW_SKILL
	NLC_OBJECT_MAGIC,
#endif
};

enum AURA_STYLE
{
	AS_NIL,
	AS_BLADER,
	AS_HITMAN,
	AS_BLASTER,
	AS_PRIEST,
	AS_END,
};

enum SPECIALTY
{
	ST_0,
	ST_1,
	ST_2,
	ST_3,
	ST_4,
	ST_5,	
	ST_6,

	// blader
	ST_SLASH = 0,
	ST_GUARDER,
	ST_SLASHMASTER,
	ST_GENERAL,
	ST_STRIKER,
	ST_HOLYGUARDER,	
	ST_CHAMPION,
	// hitman
	ST_HANDGUN = 0,
	ST_ASSASSIN,
	ST_RAPIDHAND,
	ST_KILLER,
	ST_DETECTOR,
	ST_SNIPER,
	ST_TRANSFER,
	// blaster
	ST_BLAZE = 0,
	ST_QUAKER,
	ST_IMPACTER,
	ST_EXPLOSION,
	ST_DOMINATOR,
	ST_CONCUSSION,
	ST_DEMOLITION,
	// priest
	ST_PRAYER = 0,
	ST_RECOVERY,
	ST_MONK,
	ST_ORACLE,
	ST_TELEPORTER,
	ST_DIVINER,
	ST_DEBUFFER,	

	ST_SPEC_END,
};

/*enum SPECIALTY
{
	// blader
	ST_SLASH,
	ST_GUARDER,
	ST_SLASHMASTER,
	ST_GENERAL,
	ST_HOLYGUARDER,
	ST_STRIKER,
	ST_CHAMPION,
	// hitman
	ST_HANDGUN = 0,
	ST_ASSASSIN,
	ST_RAPIDHAND,
	ST_SNIPER,
	ST_KILLER,
	ST_TRANSFER,
	ST_DETECTOR,
	// blaster
	ST_BLAZE = 0,
	ST_QUAKER,
	ST_IMPACTER,
	ST_CONCUSSION,
	ST_EXPLOSION,
	ST_DOMINATOR,
	ST_DEMOLITION,
	// priest
	ST_PRAYER = 0,
	ST_RECOVERY,
	ST_MONK,
	ST_ORACLE,
	ST_DIVINER,
	ST_DEBUFFER,
	ST_TELEPORTER,

	ST_SPEC_END,
};*/

enum SAVE_TYPE
{
	S_AUTO,
	S_LEVELUP,
	S_LOGOUT,
	S_GUILD,
	S_TEMP,
};

enum ACTION_TYPE
{
	AT_TALK,
	AT_ASK_TRADE,
	AT_ASK_FRIEND,
	AT_ASK_DUEL,
	AT_ASK_PARTY,
	AT_ASK_GUILD,
	AT_BEHAVIOR,
	AT_SKILL_CAST,
	AT_SKILL_CANCELCAST,
	AT_SKILL_EXCUTE,	
	AT_LOOT,
	AT_SKILL_CANCELEXCUTE,
	AT_ASK_REVIVAL,
	AT_COLLECT,
	AT_ASK_REVIVAL_CUR,
	AT_EMOTION,
	AT_ANIMATION,
	AT_ASK_CALL,
};

enum QUEST_PROTOCOL
{
	QP_LIST,
	QP_LOAD,
	QP_ACCEPT,
	QP_START,
	QP_ABANDON,
	QP_LOADACHIEVED,
	QP_ACHIEVED,
	QP_COMPLETE,
	QP_DELETE,
	QP_COMPLETE_FREE,
	QP_FAILED,
	QP_LOAD_DONEQUEST,
	QP_START_TIMELIMIT,
	QP_RINGRING,
	QP_COMPLETE_REPEAT,
};

enum QUEST_BIT
{
	QB_START	= 0x01,	
	QB_ACHIEVED	= 0x02,
	QB_COMPLETE	= 0x04,
	QB_FAILED	= 0x08,
};

enum FRIEND_PROTOCOL
{
	FP_ASK,
	FP_ANSWER,
	FP_INSERT,
	FP_ERASE,
	FP_LOGIN,
	FP_LOGOUT,
	FP_REFRESH,
};

enum PARTY_PROTOCOL
{
	PP_ASK,
	PP_ANSWER,
	PP_LEAVE,
	PP_EXILE,
	PP_DESTROY,
	PP_MEMBER,
	PP_TRANSFERLEADERSHIP,
	PP_UPDATEATTR,
	PP_UPDATELOCATION,
	PP_SETLOOTING,
	PP_LEADER,
	PP_INFO,
	PP_SPECIALTY,
	PP_NEW_UPDATEATTR, //dbdddddd  id, level, curhp, hp, curpp, pp, cursp, sp
};

enum DB_HLOG
{
	DHL_USER,
	DHL_PC,
	DHL_MAIL,
	DHL_QUEST,
	DHL_SKILL,
	DHL_ITEM_CREATE,
	DHL_ITEM_DELETE,
	DHL_ITEM_MOVE,
	DHL_ITEM_PLUS,
	DHL_ITEM_MINUS,
	DHL_ITEM_STORAGE,
	DHL_RANK,
	DHL_CRAFT,
	DHL_GUILD,
	DHL_AUCTION,
	DHL_ITEM_UPGRADE,
	DHL_SCRAMBLE,
	DHL_ITEM_CORPSE,
	DHL_NPC,
	DHL_OTP,
};

enum DB_LLOG
{
	// DHL_USER
	DLL_USER_INSERT,
	DLL_USER_LOGIN,
	DLL_USER_LOGOUT,
	DLL_USER_RELOGIN,

	// DHL_PC
	DLL_PC_CREATE = 0,
	DLL_PC_DELETE,
	DLL_PC_LOGIN,
	DLL_PC_LOGOUT,
	DLL_PC_LEVELUP,
	DLL_PC_SETBIND,
	DLL_PC_SPECIALTY,
	DLL_PC_SAVEALLATTR,
	DLL_PC_ADDSLOT,
	DLL_PC_LOGINFAIL,
	DLL_PC_SETPASS,
	DLL_PC_RESETPASS,
	DLL_PC_RESETPASSFAIL,
	DLL_PC_REQPASS,
	DLL_PC_CANCELPASS,
	DLL_PC_ADMINPASS,
	DLL_PC_EXP_DECREASE,
	DLL_PC_EXP_RESTORE,
	DLL_PC_INIT_SPEC,

	// DHL_MAIL
	DLL_MAIL_PARCEL_SEND = 0,
	DLL_MAIL_PARCEL_UNPACK,

	// DHL_QUEST
	DLL_QUEST_ACCEPT = 0,
	DLL_QUEST_START,
	DLL_QUEST_ABANDON,
	DLL_QUEST_ACHIEVED,
	DLL_QUEST_COMPLETE,
	DLL_QUEST_FAILED,
	DLL_QUEST_DELETE,

	// DHL_SKILL
	DLL_SKILL_INSERT = 0,
	DLL_SKILL_UPGRADE,
	DLL_SKILL_DELETE,

	// DHL_ITEM_???
	DLL_ITEM_INSERT = 0,
	DLL_ITEM_DESTROY,
	DLL_ITEM_CHEAT,
	DLL_ITEM_LOOT,
	DLL_ITEM_QUEST,
	DLL_ITEM_MOVE,
	DLL_ITEM_TRADE,
	DLL_ITEM_FILLUP,
	DLL_ITEM_MAIL,
	DLL_ITEM_BUY,
	DLL_ITEM_SELL,
	DLL_ITEM_USE,
	DLL_ITEM_BUYBACK,
	DLL_ITEM_PARCEL_RECV,
	DLL_ITEM_PARCEL_UNPACK,
	DLL_ITEM_EXPAND,
	DLL_ITEM_EXPIRED,
	DLL_ITEM_BASIC,
	DLL_ITEM_CRAFT,
	DLL_ITEM_CRAFT_FAIL,
	DLL_ITEM_AUCTION_REG,
	DLL_ITEM_AUCTION_RETURN,
	DLL_ITEM_AUCTION_BID,
	DLL_ITEM_AUCTION_BID_SUCCESS,
	DLL_ITEM_UPGRADE_BIKE,
	DLL_ITEM_ENCHANT_UPGRADE,
	DLL_ITEM_ENCHANT_FAIL,
	DLL_ITEM_NXSHOP_PICKUP,
	DLL_ITEM_GIFT,
	DLL_ITEM_NX_GM,
	DLL_ITEM_SCRAMBLE,
	DLL_ITEM_GUILD_LEVELUP,
	DLL_ITEM_GUILD_CREATE,
	DLL_ITEM_CORPSE_DROP,
	DLL_ITEM_CORPSE_LOOT,
	DLL_ITEM_HELLION_REVIVAL_BIND,
	DLL_ITEM_ENCHANT_PAY_ITEM_USE,
	DLL_ITEM_FILLUP_PAY,
	DLL_ITEM_CHAOS_START,
	DLL_ITEM_EVENT,
	
	// DHL_RANK
	DLL_RANK_PT_PLUS = 0,
	DLL_RANK_PT_MINUS,
	DLL_RANK_LEVELUP,

	// DHL_CRAFT
	DLL_CRAFT_INSERT_TECH = 0,
	DLL_CRAFT_DELETE_TECH,
	DLL_CRAFT_UPDATE_TECH,
	DLL_CRAFT_INSERT_PLAN,
	DLL_CRAFT_DELETE_PLAN,

	// DHL_GUILD
	DLL_GUILD_CREATE = 0,
	DLL_GUILD_LEVELUP,
	DLL_GUILD_ADD_GP,
	DLL_GUILD_SUB_GP,
	DLL_GUILD_SET_GP,
	DLL_GUILD_LOAD,
	DLL_GUILD_DISMISS,
	DLL_GUILD_PURGE,
	DLL_GUILD_AUTHORITY,
	DLL_GUILD_MANDATE,
	DLL_GUILD_LEVEL,
	DLL_GUILD_FORTUNE,
	DLL_GUILD_REGISTER_IMAGE,
	DLL_GUILD_ADD_NP,
	DLL_GUILD_SUB_NP,
	DLL_GUILD_SET_NP,

	// DHL_AUCTION
	DLL_AUCTION_REG = 0,
	DLL_AUCTION_DEL,
	DLL_AUCTION_BID,
	DLL_AUCTION_DEL_EXPIRED,
	DLL_AUCTION_DEL_CANCEL,
	DLL_AUCTION_DEL_SUCCESS,

	// DHL_SCRAMBLE,
	DLL_SCRAMBLE_CHANGE_OWNER = 0,
	DLL_SCRAMBLE_REGISTER_CAND,
	DLL_SCRAMBLE_CANCEL_REGISTER,
	DLL_SCRAMBLE_CLEAR_CAND,

	// DHL_NPC
	DLL_NPC_KILLED = 0,

	// DHL_OTP
	DLL_OTP_REGISTER = 1,
	DLL_OTP_UNREGISTER,
	DLL_OTP_LOGIN,
	DLL_OTP_LOGINFAIL,
};

enum ITEM_PROTOCOL
{
	IP_LOAD,	// 0
	IP_INSERT,
	IP_DELETE,
	IP_MOVE,
	IP_MOVESLOT,
	IP_MOVEINVEN,
	IP_DISCARD,
	IP_BUY,
	IP_SELL,
	IP_PLUSNUM,
	IP_MINUSNUM,	// 10
	IP_PUTON,
	IP_PUTOFF,
	IP_ENCHANT,
	IP_ASKTRADE,
	IP_ANSWERTRADE,
	IP_OPENTRADE,
	IP_DISPLAYMT,
	IP_DISPLAYOT,
	IP_DISCARDMT,
	IP_DISCARDOT,	// 20
	IP_READYMT,
	IP_READYOT,
	IP_CLOSETRADE,
	IP_LOOTLIST,
	IP_LOOT,
	IP_DEL_LOOTLIST,
	IP_ADDSLOT,
	IP_RELEASE,
	IP_ROLL,
	IP_EXPANDEDSTORAGE,	// 30
	IP_SETLOOTER,
	IP_DISPLAYPARCEL,
	IP_DISCARDPARCEL,
	IP_ITEMSTORELIST,
	IP_BUYITEM,
	IP_SELLITEM,
	IP_BUYBACKITEM,
	IP_SOLD,
	IP_USE,
	IP_COLLECT,	// 40
	IP_CAST_ONUSE,
	IP_CANCEL_CAST_ONUSE,
	IP_RIDING,
	IP_FILLUP,
	IP_UPDATEGAS,
	IP_DISPLAYAUCTION,
	IP_DISCARDAUCTION,
	IP_BIKE_UPGRADE,
	IP_BIKE_TURBO,
	IP_ENCHANT_UPGRADE, // 50
	IP_RESULT, //bbbwdb IP_RESULT, ITEM_RESULT_TYPE, ITEM_RESULT_SUB_TYPE, Index, IID, Num
	IP_INSERT_NX_GM,
	IP_DELETE_NX_GM,
	IP_STEALLOOTLIST,
	IP_STEALLOOT,
	IP_DEL_STEALLOOTLIST,
	IP_FILLUP_PAY,
};

enum ITEM_BIT
{
	IB_LOCKED	= 0x00000001,	// not use
	IB_SOLD		= 0x00000002,	// not use
	IB_BOUND	= 0x00000004,
	IB_CHEAT	= 0x00000008,
	IB_UNIQUE	= 0x00000010,	// not use
	IB_QUEST	= 0x00000020,
	IB_MAIL		= 0x00000040,	// not use
	IB_RIDING	= 0x00000080,
	IB_STORE	= 0x00000100,
	IB_PAY		= 0x00000200,
	IB_DELETED  = 0x10000000,

	IB_BOUNDMASK = (IB_QUEST | IB_BOUND | IB_UNIQUE | IB_PAY),
	IB_MERGEMASK = (IB_CHEAT | IB_BOUNDMASK),
	IB_TRADEMASK = (IB_MERGEMASK),
	IB_SELLMASK = (IB_QUEST | IB_PAY | IB_CHEAT),
	IB_DISCARDMASK = (IB_PAY),
//	IB_STORAGEMASK = IB_BOUNDMASK,
	IB_RESETMASK = (IB_RIDING),
};

enum MONEY_LOG
{
	ML_NIL,
	ML_INCOME,
	ML_INCOME_SELL,
	ML_INCOME_SELL_S,
	ML_OUTGO,
	ML_OUTGO_BUY,
	ML_OUTGO_BUY_S,
	ML_OUTGO_BUYBACK,
	ML_OUTGO_BUYBACK_S,
};

enum ITEM_CLASS
{
	IC_NIL,
	IC_WEAPON,
	IC_AMMO,
	IC_ARMOR,
	IC_ORNAMENT,
	IC_GENERAL,
	IC_VEHICLE,
	IC_MONEY,

	IC_END,
};

enum ITEM_SUBCLASS
{
	ISC_NIL,
	ISC_SWORD,
	ISC_HANDGUN,
	ISC_RIFLE,
	ISC_DUALSWORD,
	ISC_LAUNCHER,
	ISC_RESERVED1,
	ISC_RESERVED2,
	ISC_BULLET,
	ISC_SHELL,
	ISC_HEAD,
	ISC_CHEST,
	ISC_LEGS,
	ISC_HANDS,
	ISC_FEET,
	ISC_WAIST,
	ISC_ORB,
	ISC_COSTUME,
	ISC_EARRING,
	ISC_NECKLACE,
	ISC_RING,
	ISC_RESERVED5,
	ISC_RESERVED6,
	ISC_BIKE,
	ISC_COIN,
	ISC_QUEST,
	ISC_POTION,
	ISC_SKILLSTONE,
	ISC_PLAN,
	ISC_MISCELLANEOUS,
	ISC_UPGRADE_WEAPON,
	ISC_UPGRADE_ARMOR,
	ISC_UPGRADE_BIKE,
	ISC_GIFT,
	ISC_PAYGAS,
	ISC_DUMMY,
	ISC_REVIVAL,

	ISC_END,
};

enum ITEM_MATERIAL
{
	IM_NIL,
	IM_CLOTH,
	IM_LEATHER,
	IM_METAL,
	IM_SPECIALFIBER,
};

enum ITEM_ATTR
{
};

enum INVEN_TYPE
{
	IT_WEAR,
	IT_BASE,
	IT_MONEY,
	IT_MAIL,
	IT_AUCTION,
	IT_TRADE,
	IT_ST01,
	IT_ST02,
	IT_ST03,
	IT_ST04,
	IT_ST05,
	IT_END,

	IT_BUYBACK = 0xfe,
	IT_DEFAULT = 0xff,
};

enum SLOT_TYPE
{
	ST_BASE,
	ST_WEAPON,
	ST_AMMO,
	ST_HEAD,
	ST_CHEST,
	ST_LEGS,
	ST_HANDS,
	ST_FEET,
	ST_WAIST,
	ST_ORB,
	ST_EARRING,
	ST_NECKLACE,
	ST_RING,
	ST_COSTUME,
	ST_RESERVED2,
	ST_RESERVED1,
	ST_TRADE,
	ST_MONEY,
	ST_END,
};

enum MSG_LOC
{
	ML_SYS,
	ML_POP,
	ML_ALERT,
	ML_NPC,
	ML_EXCLAM,
};

enum TEXT_COLOR
{
	TC_WHITE = RGB(255, 255, 255),
	TC_L_YELLOW = RGB(255, 255, 128),
	TC_D_YELLOW = RGB(255, 192, 0),
	TC_L_RED = RGB(255, 128, 128),
	TC_D_RED = RGB(240, 0, 0),
	TC_L_BLUE = RGB(0, 128, 192),
	TC_D_BLUE = RGB(0, 0, 160),
// Red color
	TC_INDIANRED = RGB(205, 92, 92),
	TC_LIGHTCORAL = RGB(240, 128, 128),
	TC_SALMON = RGB(250, 128, 114),
	TC_DARKSALMON = RGB(233, 150, 122),
	TC_LIGHTSALMON = RGB(255, 160, 122),
	TC_CRIMSON = RGB(220, 20, 60),
	TC_RED = RGB(255, 0, 0),
	TC_FIREBRICK = RGB(178, 34, 34),
	TC_DARKRED = RGB(139, 0, 0),
// PINK COLORS 
	TC_PINK = RGB(255, 192, 203), 
	TC_LIGHTPINK = RGB(255, 182, 193),
	TC_HOTPINK = RGB(255, 105, 180),
	TC_DEEPPINK = RGB(255, 20, 147),
	TC_MEDIUMVIOLETRED = RGB(199, 21, 133), 
	TC_PALEVIOLETRED = RGB(219, 112, 147), 
// ORANGE COLORS 
//	TC_LIGHTSALMON = RGB(255, 160, 122),
	TC_CORAL = RGB(255, 127, 80),
	TC_TOMATO = RGB(255, 99, 71),
	TC_ORANGERED = RGB(255, 69, 0),
	TC_DARKORANGE = RGB(255, 140, 0),
	TC_ORANGE = RGB(255, 165, 0),
// YELLOW COLORS
	TC_GOLD = RGB(255, 215, 0),
	TC_YELLOW = RGB(255, 255, 0),
	TC_LIGHTYELLOW = RGB(255, 255, 224),
	TC_LEMONCHIFFON = RGB(255, 250, 205),
	TC_LIGHTGOLDENRODYELLOW = RGB(250, 250, 210),
	TC_PAPAYAWHIP = RGB(255, 239, 213),
	TC_MOCCASIN = RGB(255, 228, 181),
	TC_PEACHPUFF = RGB(255, 218, 185),
	TC_PALEGOLDENROD = RGB(238, 232, 170),
	TC_KHAKI = RGB(240, 230, 140),
	TC_DARKKHAKI = RGB(189, 183, 107),
// PURPLE COLORS
	TC_LAVENDER = RGB(230, 230, 250),
	TC_THISTLE = RGB(216, 191, 216),
	TC_PLUM = RGB(221, 160, 221),
	TC_VIOLET = RGB(238, 130, 238),
	TC_ORCHID = RGB(218, 112, 214),
	TC_FUCHSIA = RGB(255, 0, 255),
	TC_MEDIUMORCHID = RGB(186, 85, 211),
	TC_MEDIUMPURPLE = RGB(147, 112, 219),
	TC_BLUEVIOLET = RGB(138, 43, 226),
	TC_DARKVIOLET = RGB(148, 0, 211),
	TC_DARKORCHID = RGB(153, 50, 204),
	TC_DARKMAGENTA = RGB(139, 0, 139),
	TC_PURPLE = RGB(128, 0, 128),
	TC_INDIGO = RGB(75, 0, 130),
	TC_SLATEBLUE = RGB(106, 90, 205),
	TC_DARKSLATEBLUE = RGB(72, 61, 139),
	TC_MEDIUMSLATEBLUE = RGB(123, 104, 238),
// GREEN COLORS
	TC_GREENYELLOW = RGB(173, 255, 47),
	TC_CHARTREUSE = RGB(127, 255, 0),
	TC_LAWNGREEN = RGB(124, 252, 0),
	TC_LIME = RGB(0, 255, 0),
	TC_LIMEGREEN = RGB(50, 205, 50),
	TC_PALEGREEN = RGB(152, 251, 152),
	TC_LIGHTGREEN = RGB(144, 238, 144),
	TC_MEDIUMSPRINGGREEN = RGB(0, 250, 154),
	TC_SPRINGGREEN = RGB(0, 255, 127),
	TC_MEDIUMSEAGREEN = RGB(60, 179, 113),
	TC_SEAGREEN = RGB(46, 139, 87),
	TC_FORESTGREEN = RGB(34, 139, 34),
	TC_GREEN = RGB(0, 128, 0),
	TC_DARKGREEN = RGB(0, 100, 0),
	TC_YELLOWGREEN = RGB(154, 205, 50),
	TC_OLIVEDRAB = RGB(107, 142, 35),
	TC_OLIVE = RGB(128, 128, 0),
	TC_DARKOLIVEGREEN = RGB(85, 107, 47),
	TC_MEDIUMAQUAMARINE = RGB(102, 205, 170),
	TC_DARKSEAGREEN = RGB(143, 188, 143),
	TC_LIGHTSEAGREEN = RGB(32, 178, 170),
	TC_DARKCYAN = RGB(0, 139, 139),
	TC_TEAL = RGB(0, 128, 128),
// BLUE COLORS
	TC_AQUA = RGB(0, 255, 255),
	TC_CYAN = RGB(0, 255, 255),
	TC_LIGHTCYAN = RGB(224, 255, 255),
	TC_PALETURQUOISE = RGB(175, 238, 238),
	TC_AQUAMARINE = RGB(127, 255, 212),
	TC_TURQUOISE = RGB(64, 224, 208),
	TC_MEDIUMTURQUOISE = RGB(72, 209, 204),
	TC_DARKTURQUOISE = RGB(0, 206, 209),
	TC_CADETBLUE = RGB(95, 158, 160),
	TC_STEELBLUE = RGB(70, 130, 180),
	TC_LIGHTSTEELBLUE = RGB(176, 196, 222),
	TC_POWDERBLUE = RGB(176, 224, 230),
	TC_LIGHTBLUE = RGB(173, 216, 230),
	TC_SKYBLUE = RGB(135, 206, 235),
	TC_LIGHTSKYBLUE = RGB(135, 206, 250),
	TC_DEEPSKYBLUE = RGB(0, 191, 255),
	TC_DODGERBLUE = RGB(30, 144, 255),
	TC_CORNFLOWERBLUE = RGB(100, 149, 237),
	TC_ROYALBLUE = RGB(65, 105, 225),
	TC_BLUE = RGB(0, 0, 255),
	TC_MEDIUMBLUE = RGB(0, 0, 205),
	TC_DARKBLUE = RGB(0, 0, 139),
	TC_NAVY = RGB(0, 0, 128),
	TC_MIDNIGHTBLUE = RGB(25, 25, 112),
// BROWN COLORS
	TC_CORNSILK = RGB(255, 248, 220),
	TC_BLANCHEDALMOND = RGB(255, 235, 205),
	TC_BISQUE = RGB(255, 228, 196),
	TC_NAVAJOWHITE = RGB(255, 222, 173),
	TC_WHEAT = RGB(245, 222, 179),
	TC_BURLYWOOD = RGB(222, 184, 135),
	TC_TAN = RGB(210, 180, 140),
	TC_ROSYBROWN = RGB(188, 143, 143),
	TC_SANDYBROWN = RGB(244, 164, 96),
	TC_GOLDENROD = RGB(218, 165, 32),
	TC_DARKGOLDENROD = RGB(184, 134, 11),
	TC_PERU = RGB(205, 133, 63),
	TC_CHOCOLATE = RGB(210, 105, 30),
	TC_SADDLEBROWN = RGB(139, 69, 19),
	TC_SIENNA = RGB(160, 82, 45),
	TC_BROWN = RGB(165, 42, 42),
	TC_MAROON = RGB(128, 0, 0),
};

enum MOVE_FLAG
{
	MF_WALK,
	MF_RUN,
	MF_SIDEWALK,
	MF_SIDERUN,
	MF_BACKWALK,
	MF_ROTATE,
	MF_RELEASE,
	MF_DASH,
	MF_WHILWIND,
	MF_BLANKCART,
	MF_SNATCH,	

	MF_MOUSE = 0x100,
	MF_JUMP = 0x200,
	MF_LAST = 0x400,
};

enum AI_STATE
{
	AIS_NIL,
	AIS_WAIT,
	AIS_MOVE,
	AIS_MOVE_STOP,
	AIS_MOVE_FORCED,
	AIS_CHASE,
	AIS_CHASE_FAIL,
	AIS_TRAIL,
	AIS_TRAIL_FAIL,
	AIS_RETURN,
	AIS_RETURN_FAIL,
	AIS_SKILL,
	AIS_DIE,
	AIS_KILLED,
	AIS_DISAPPEAR,
	AIS_SCRIPT,
	AIS_UNBIND,
	AIS_RELEASEIMMUNE,
	AIS_JUMP,
};

enum EXCUTE_VERSION
{
	V_CS,	// cosmos
	V_KT,	// korean test
	V_KR,	// korean
	V_CN,	// chinese
	V_EN,
	V_NS,	// nexon
	V_JP,
};

// System Code
enum SYS_CODE
{
	SYS_NXAUTH,
	SYS_NPROTECT,
	SYS_NPROTECT_ON,
	SYS_TEST,
	SYS_PAY_REAL,
	SYS_PAY_TEST,
	SYS_PK,

	SYS_END = 32,
};

// Event Code
enum EVENT_CODE
{
	EVENT_GSTAR,
	EVENT_OBTGIFT,
	EVENT_PCBANG,
	EVENT_PCBANGCOUPON,
	EVENT_EXP_20,
	EVENT_1H_FREEPCBANG,
	EVENT_ANN_POTION,
	EVENT_USER_RETURN,
	EVENT_THANKSGIVINGDAY,
	EVENT_DRS_LUCKYBOX,
	EVENT_NEW_IMMORTAL,
	EVENT_HALLOWEENBOX,

	EVENT_END = 32,
};

// Base Attribute
enum ATTR
{
	ATTR_PLAYER = 1,
	ATTR_NPC,
	ATTR_ITEM,
};

// Character Admin Level
enum AdminType
{
	A_USER,
	A_BLOCKED,
	A_RESERVED1,
	A_OBSERVER,
	A_GM,	// Game Master
	A_ADMIN,
};

enum ANSWER
{
	ANS_OK,
	ANS_ERR,
	ANS_ERR_NONE,
	ANS_ERR_BLOCKED,
	ANS_ERR_RESTART_DELAY,
	ANS_ERR_GUILDMEMBER,
	ANS_ERR_ALREADY_DELETED,
	ANS_ERR_WRONG_PASSWORD,
};


enum LOGIN_ANS
{
	LA_ERROR,
	LA_OK,
	LA_WRONGID,
	LA_WRONGPWD,
	LA_SAMEUSER,
	LA_BLOCKED,
	LA_EXPIRED,
	LA_AGELIMITED,
	LA_NOTPERMITTED,
	LA_LOGINLATER,
	LA_NOTONSERVICE,
	LA_NX_FORBIDDEN,
	LA_UNDERADMIN,
	LA_NX_FORBIDDEN_IP,
	LA_WRONG_TIMESTAMP,
	LA_BLOCKED_IP,
	LA_OTP_REQUIRED,
	LA_WRONG_OTP,
	LA_OTP_TIMEOUT,
};

enum NEWPLAYER_ANS
{
	NA_ERROR,
	NA_OK,
	NA_WRONGCLASS,
	NA_OVERPLAYERNUM,
	NA_OCCUPIEDID,
	NA_WRONGPROPERTY,
	NA_NOTAVAILABLE,
};

enum COPYPLAYER_ANS
{
	CP_ERROR,
	CP_OK,
	CP_VALIDNAME,
	CP_OVERPLAYERNUM,
	CP_OCCUPIEDNAME,
	CP_INVALIDSERVER,
	CP_INVALIDPLAYER,
	CP_BLOCKEDPLAYER,
};

enum CLOSE_CONNECT
{
	CC_NORMAL,
	CC_KICK,
	CC_SAMEPLAYER,
	CC_SAMEUSER,
	CC_SPEEDHACK,
	CC_EXPIRED,
	CC_OVERPOPULATION,
	CC_SOCKETCLOSE,
	CC_RELOGINFORCOPYPLAYER,
	CC_MOVEHACK,
	CC_SERVERSHUTDOWN,
	CC_RELOGINFAILED,
	CC_NPROTECT,
	CC_GUILDPREFETCH,
	CC_NX_PCBANG_F_EXPIRED,
	CC_NX_PCBANG_M_EXPIRED,
	CC_CODECORRUPT,
	CC_CODEHACK,
};

enum {
	PASS_SET,
	PASS_INIT,
	PASS_REQUEST_INIT,
	PASS_CANCEL_INIT,
};

enum LOGIN_TYPE
{
	LT_DELETED		= 0x00000001,
	LT_BLOCKED		= 0x00000002,
	LT_HOST			= 0x00000004,
	LT_PCBANG		= 0x00000008,
	LT_UNDERADMIN	= 0x00000010,
	LT_OTPDISABLED	= 0x00000020,

	LT_POSSIBLECAFE_CANUSEUSER		= 0x40000000, // event cafe
	LT_IMPOSSIBLECAFE_CANUSEUSER	= 0x80000000,
};

enum LOGIN_INFO
{
	LI_FREESERVICE	= 0x00000001,
	LI_NONPROTECT	= 0x00000002,
	LI_X_STAT		= 0x00000004, // 통계에서 제외(개발자, 관계자 등등)
	LI_SUSPECT		= 0x00000008, // 해킹 용의자
	LI_LEFTUSER		= 0x00000010, // 떠난 유저
};

enum PARTY_LOOT
{
	PL_ROUNDROBIN,
	PL_RANDOM,
	PL_FREEFORALL,
	PL_LEADERLOOT,
	PL_END,
};

enum BUFF_TYPE
{
	BUFF_OVERDAMAGE = 1,
	BUFF_GAZE,
	BUFF_STUN,
	BUFF_SELFSAFER,
	BUFF_GUARDAURA,
	BUFF_FILLAURA,
	BUFF_PROTECT_FROM,
	BUFF_PROTECT_TO,
	BUFF_IRONWALL,
	BUFF_PROTECTION,	// 10
	BUFF_WHILWIND,
	BUFF_DASH,
	BUFF_ENERVATION,
	BUFF_CAPTURE,
	BUFF_BLANKCART,
	BUFF_INTENSEFIRE,
	BUFF_SWIFT,
	BUFF_MOVEUP,
	BUFF_FREEZEAURA,
	BUFF_AVOIDEYES,	// 20
	BUFF_SHELTER,
	BUFF_PROVISION,
	BUFF_DHOLE_DEATH,
	BUFF_DHOLE_TOPRANK,
	BUFF_LTBALL_150,
	BUFF_LTBALL_175,
	BUFF_LTBALL_200,
	BUFF_DHOLE_GROUP1,
	BUFF_DHOLE_GROUP2,
	BUFF_DHOLE_GROUP3,	// 30
	BUFF_BULLETWOUND,
	BUFF_MAZE,
	BUFF_ROOT,
	BUFF_CAMOUFLAGE_BUSH,
	BUFF_CAMOUFLAGE_DUSTBIN,
	BUFF_CAMOUFLAGE_BOX,
	BUFF_CAUTION,
	BUFF_SNATCH,
	BUFF_LASTDITCH,
	BUFF_THIRSTBLOOD_FROM,	// 40
	BUFF_ANTICASTING,
	BUFF_FLASHBANG,
	BUFF_THIRSTBLOOD_TO,
	BUFF_POTION_HP,
	BUFF_DEATH,
	BUFF_RING,
	BUFF_RIDE,
	BUFF_KILLLINE,
	BUFF_POISONQUEEN,
	BUFF_SPIDERQUEEN,   // 50
	BUFF_HEAL,          
	BUFF_ANTIASSAULT,
	BUFF_NOBLESACRIFICE,
	BUFF_NOBLESACRIFICE_DE,
	BUFF_THORNS,
	BUFF_PARY,
	BUFF_ACMLT_PT,
	BUFF_SPINBUTCHER,
	BUFF_REVIVALSEQUELA,
	BUFF_SHADOWGREEP_FROM,	// 60
	BUFF_SHADOWGREEP_TO,
	BUFF_GM,
	BUFF_ENRAGE,
	BUFF_GUARDIANEMISSION,
	BUFF_WRATHBLASTING,
	BUFF_EARTHTREMOR_FROM,
	BUFF_EARTHTREMOR_TO,
	BUFF_BURNINGWEAPON,
	BUFF_EVADEEMISSION,
	BUFF_SLOW,	// 70
	BUFF_INTENSIVEFIRE,
	BUFF_TINYBLASTING,
	BUFF_TURBO,
	BUFF_IMMUNETODAMAGE,
	BUFF_OFFENSIVEEMISSION,
	BUFF_PROVOKE,
	BUFF_HOLLYDOMINATION,
	BUFF_INVISIBLEMINE,
	BUFF_ADRENALINACCELERATION,
	BUFF_SHADOWSTEP,  // 80
	BUFF_IMPRECATION,
	BUFF_BRIGHTNESS,
	BUFF_ISOLATION,
	BUFF_ATTENTION,
	BUFF_FREEZESHIELD_FROM,
	BUFF_FREEZESHIELD_TO,
	BUFF_ANGRYCLAW,
	BUFF_VETERANMOVEMENT,
	BUFF_VIOLENTBILLOW,
	BUFF_IRONCURTAIN, // 90
	BUFF_SPIRITCONQUEST,
	BUFF_WARP,
	BUFF_DIVINEGRACE_FROM,
	BUFF_DIVINEGRACE_TO,
	BUFF_BLOCKADE_FROM,
	BUFF_BLOCKADE_TO,
	BUFF_PCBANG_EVENT_HP,
	BUFF_SITDOWN_SHOT,
	BUFF_IDEALEVASION,
	BUFF_BLESSINGHEAVEN, // 100
	BUFF_POTION_PP,
	BUFF_POTION_SP,
	BUFF_START_SAFE,
	BUFF_PCBANG_PREMIUM,
	BUFF_EVENT_EXP_20,
	BUFF_INVIS_SAFE,
	BUFF_PAY_ITEM_EXP_20,
	BUFF_PAY_ITEM_MONEY_20,
	BUFF_PAY_ITEM_RKP_20,
	BUFF_PAY_EXP_RESTORE,	// 110
	BUFF_SCAN_INVIS,
	BUFF_CRITICAL_PER_8,
	BUFF_ABSORB_DAMAGE,
	BUFF_CRITICAL_MASTERY,
	BUFF_ARENA_TRANSMIT,
	BUFF_GUILD_1,
	BUFF_GUILD_2,
	BUFF_GUILD_3,
	BUFF_GUILD_4,
	BUFF_NEWBIE,	// 120
	BUFF_NEWBIE_POINT,
	BUFF_FATAL_WOUND,
	BUFF_FATAL_POISON,
	BUFF_POISON_GAS,
	BUFF_STUN_ALTERNATIVE,
	BUFF_ANTI_ARMOR,
	BUFF_GROGGY,
	BUFF_PREVENTION_CASTING,
#ifdef _NEW_SKILL
	BUFF_HOLLY_SHIELD,
	BUFF_WILD_RUSH,
	BUFF_WEDGE_BULLET_FROM,
	BUFF_WEDGE_BULLET_TO,
	BUFF_VICIOUS_EPIDEMIC,
#endif

	BUFF_MAX,
};

enum BUFF_PROTOCOL
{
	BP_INSERT,       //bwbIbd  BP_INSERT, Buff, StateType, State, Level, 남은시간초
	BP_DELETE,
	BP_UPDATE,       //bwbIbd  BP_UPDATE, Buff, StateType, State, Level, 남은시간초
};

enum SKILL_PROTOCOL
{
	SP_INSERT,       //bwbd  SP_INSERT, Skill, Level, CoolDown
	SP_DELETE,       //bw    SP_DELETE, Skill
	SP_UPGRADE,      //bwb   SP_UPGRADE, Skill, Level
	SP_SAVECOOLDOWN,
	SP_CAST,         //bwdd  SP_CAST, Skill, 자신Id, 타겟Id
	SP_CANCELCAST,   //bwd   SP_CANCEL, Skill, 타켓Id,
	SP_EXECUTE,      //bwddbb SP_EXECUTE, Skill, 자신Id, 타겟Id, 갯수, 성공
	SP_EXECUTEWIDE,  //bwddbb SP_EXECUTEWIDE, Skill, 자신Id, 타겟Id, 갯수, 성공
	SP_ACTIVE,       //bwbd  SP_ACTIVE, Skill, 1, 활성화시간초
	SP_CAST_RVS,     //bwd   SP_CAST_RVS, Skill, 진행된Tick
	SP_CANCEL_EXECUTE, //bwd  SP_CANCELEXECUTE, Skill, 자신Id
};

enum UP_TYPE
{
	UT_PT = 1,
	UT_PER,
};

enum SKILL_INDEX
{
	SI_DEFAULT = 1,
	SI_AUTORECOV,
	SI_REST,
	SI_POWERSTRENGTH,
	SI_PHYSICALHEALTH,
	SI_QUICKLYMOVEMENT,
	SI_ENDURANCETRANING,
	SI_SOURCEAURA,
	SI_POWERCONCENTRATION,
	SI_CAMOUFLAGEBUSH, // 10
	SI_CAMOUFLAGEDUSTBIN,
	SI_CAMOUFLAGEBOX,
	SI_CAMOUFLAGESENSOR,
	SI_CAUTION,
	SI_RETURN,

	SI_CRICHANBLADER = 100,
	SI_VIOBLOW,
	SI_OVERDAMAGE,
	SI_DEFENSIVE,
	SI_TAUNT,
	SI_CNTATTACK,
	SI_PROTECT,
	SI_IRONWALL,
	SI_PROTECTION,
	SI_WHILWIND,
	SI_SPEEDUP, // 110
	SI_SLASHER,
	SI_VIOTRAIN,
	SI_GAZE,
	SI_SMASH,
	SI_DASH,
	SI_ENERVATION,
	SI_SNATCH,
	SI_LASTDITCH,
	SI_WHILWINDTRAIN,
	SI_ENERVATIONTRAIN, // 120
	SI_FLOGDOWN,
	SI_SPIRITFORCE,
	SI_DAMAGECONTROL,
	SI_ENRAGE,
	SI_GUARDIANEMISSION,
	SI_ASSAULTARM,
	SI_ASSAULTBLOW,
	SI_WRATHBLASTING,
	SI_OFFENSIVEEMISSION,
	SI_PROVOKE, // 130
	SI_HEALING,
	SI_MIGHTYWHILWIND,
	SI_HOLLYDOMINATION,
	SI_CHARGE,
	SI_CRY,
	SI_ASSAULTBLOWTRAIN,
	SI_DASHTRAIN,
	SI_DEATHBLOW,
	SI_REBIRTHGENERAL,
	SI_DIVINEGRACE, // 140
	SI_EXPERTFLOGDOWN,
	SI_BLOCKADE,
	SI_MASTEROFGENERAL,
	SI_VAGABOND,
	SI_SWIFT_STRIKER,
#ifdef _NEW_SKILL
	SI_HOLLY_SHIELD,
	SI_BLOOD_DRAIN,
	SI_WILD_RUSH,
	SI_SPLASH_BLOW,
#endif



	SI_CRICHANHITMAN = 200,
	SI_WILDSHOT,
	SI_DECISIONSHOT,
	SI_RIFLE,
	SI_SPEEDUPPASS,
	SI_PIERBULLET,
	SI_BUTTSHOT,
	SI_CAPTURE,
	SI_BLANKCART,
	SI_AIMINGSHOT,
	SI_SPEEDUPRAPID, // 210
	SI_WILDSHOTTRAIN,
	SI_DEMOLFIRE,
	SI_CRAZYFIRE,
	SI_INTENSEFIRE,
	SI_SWIFT,
	SI_MOVEUP,
	SI_RIFLEUSE,
	SI_THIRSTBLOOD,
	SI_ANTICASTING,
	SI_AIMINGSHOTTRAIN, // 220
	SI_CRAZYFIRETRAIN,
	SI_BULLETWOUND,
	SI_SHADOWPANG,
	SI_RIFLEDRILL,
	SI_SPLASHMINE,
	SI_BINDMINE,
	SI_GOLDCOLLECTOR,
	SI_INTENSIVEFIRE,
	SI_EVADEEMISSION,
	SI_QUICKAIMING, // 230
	SI_MINEUPGRADE,
	SI_INVISIBLEMINE,
	SI_EXPERTSNIPER,
	SI_ADRENALINACCELERATION,
	SI_RAPIDFIRE,
	SI_SHADOWSTEP,
	SI_INTENSIVEFIRETRAIN,
	SI_BACKSTEP,
	SI_BROKENSHOT,
	SI_BURNINGSHADOW, // 240
	SI_SITDOWNSHOT,
	SI_STEALAGE,
	SI_IDEALEVASION,
	SI_INVISIBLESENSOR,
	SI_HAWKEYES,
	SI_FLYINGWIND,
	SI_BURNINGWEAPON_ASSASSIN,
	SI_BURNINGWEAPON_ASSASSIN_TRAIN,
#ifdef _NEW_SKILL
	SI_SNIPER_TRAIN,
	SI_WEDGE_BULLET,
	SI_AUTOMATIC_LASERGUN,
	SI_AUTOMATIC_RAILGUN,
#endif




	SI_CRICHANBLASTER = 300,
	SI_PIERCEFIRE,
	SI_SELFSAFER,
	SI_CONCENAURA,
	SI_SPREADFIRE,
	SI_GUARDAURA,
	SI_FREEZEAURA,
	SI_AVOIDEYES,
	SI_SHOCKWAVE,
	SI_RUINAURA,
	SI_CHAINFIRE, // 310
	SI_PIERCEFIRETRAIN,
	SI_FILLAURA,
	SI_SHELTER,
	SI_PROVISION,
	SI_REVENGE,
	SI_FLASHBANG,
	SI_TELEPORT,
	SI_SHOCKWAVETRAIN,
	SI_REVENGETRAIN,
	SI_DEADLYFIRE, // 320
	SI_KILLLINE,
	SI_VALKYRIEMISSILE,
	SI_EARTHTREMOR,
	SI_EARTHBURSTING,
	SI_BURNINGWEAPON,
	SI_SUDDENIMPACT,
	SI_SPIDERBOMB,
	SI_SPREADFIRETRAIN,
	SI_IMPRECATION,
	SI_BRIGHTNESS, // 330
	SI_COLLISIONWAVE,
	SI_FIRESTORM,
	SI_KILLLINETRAIN,
	SI_ISOLATION,
	SI_ATTENTION,
	SI_BURNINGWEAPONTRAIN,
	SI_FREEZESHIELD,
	SI_ABLAZEHELL,
	SI_RECOIL,
	SI_INVISIBLERADAR, // 340
	SI_FORCEOFTHEFIRE,
	SI_SNAKEVISION,
	SI_PROTECTION_EXPLOSION,
	SI_EXPLOSION_MASTER,
#ifdef _NEW_SKILL
	SI_VICIOUS_EPIDEMIC,
	SI_SELF_BLOWUP,
	SI_SELF_SAFER_UPGRADE,
	SI_FREEZING_FIRE,
#endif



	SI_CRICHANPRIEST = 400,
	SI_TRIPLESWING,
	SI_SWORDDANCING,
	SI_HAMMERGLEAM,
	SI_CURE,
	SI_REBIRTHRECOVERY,
	SI_GROUPHEAL,
	SI_EXPERTCURE,
	SI_SLEEP,
	SI_RESTORATION,
	SI_HEALINGSIGN, // 410
	SI_ANTIASSAULT,
	SI_NOBLESACRIFICE,
	SI_SOULSTINGER,
	SI_THORNS,
	SI_PARY,
	SI_EXPERTGLEAM,
	SI_SHOUT,
	SI_SPINBUTCHER,
	SI_THUNDEREFFECT,
	SI_REBIRTHMONK, // 420
	SI_BURNING,
	SI_SHADOWGREEP,
	SI_EXPERTCURETRAIN,
	SI_SHOUTTRAIN,
	SI_TINYBLASTING,
	SI_SLUMBER,
	SI_ANTIASSAULTTRANING ,
	SI_ENERGYSTORM,
	SI_TRIPLESWINGTRANING,
	SI_EXTINCTION, // 430
	SI_CUREMASTER,
	SI_MINDCONTROL,
	SI_HOLLYGLEAM,
	SI_ANGRYCLAW,
	SI_VETERANMOVEMENT,
	SI_VIOLENTBILLOW,
	SI_IRONCURTAIN,
	SI_SPIRITCONQUEST,
	SI_ADVANCECURE,
	SI_WARP, // 440
	SI_BLITZ,
	SI_SWORDMANSHIP,
	SI_REDALERT,
	SI_RESURRECTION,
	SI_BUFFUPGRADE,
	SI_BLESSINGHEAVEN,
	SI_ZEROGRAVITY,
	SI_WARPTRANING,
	SI_SPIRITSPHERE,
	SI_OCTAHEDRON, // 450
	SI_CRITICALMASTERY,



	SI_NPC_WIDEATTACK = 500,
	SI_NPC_DOWNBLOWGRONECH,
	SI_NPC_STUNGRONECH,
	SI_NPC_POISONQUEEN,
	SI_NPC_SPIDERQUEEN,
	SI_NPC_CROSSSWINGLORN,
	SI_NPC_DOWNBLOWLORN,
	SI_NPC_CRITICAL1,
	SI_NPC_CRITICAL2,
	SI_NPC_SPIDERBOMB,
	SI_NPC_SPLASHMINE, // 510
	SI_NPC_SLOW,
	SI_NPC_SWEEP_UPYRE,
	SI_NPC_VOMITING_UPYRE,
	SI_NPC_SHOUT_UPYRE,
	SI_NPC_ATTACK_VOMITING,
	SI_NPC_BOOM_VOMITING,
	SI_NPC_RUSH_BOOM,
	SI_NPC_INVISIBLEMINE,
	SI_NPC_ABLAZEHELL,
	SI_NPC_SUMMON_MINI_1, // 520
	SI_NPC_INVISIBLE_SENSOR,
	SI_NPC_INVISIBLE_SENSOR_ATTACK,
	SI_NPC_INVISIBLE_RADAR,
	SI_NPC_ARENA_TRANSMIT,
	SI_NPC_STUNBLOW,
	SI_NPC_FATALWOUND,
	SI_NPC_FATALPOISON,
	SI_NPC_GREATBLOW,
	SI_NPC_POISON_GAS,
	SI_NPC_DOWNBLOW2, // 530
	SI_NPC_RUSH,
	SI_NPC_SUMMON_POLLUTION_MATTER,
	SI_NPC_RADIOACTIVITY,
	SI_NPC_RUSH_STUN_ALTERNATIVE,
	SI_NPC_STEIN_BLASTING,          //폭주
	SI_NPC_STEIN_SUMMON_HENCHMAN,   //부하소환
	SI_NPC_STEIN_SUMMON_HEALER,     //힐링소환
	SI_NPC_HEALING_PARENT,          //힐링
	SI_NPC_AURA_STORM,              //아우라폭풍
	SI_NPC_NOXIOUS_GAS, // 540      //강력한맹독가스
	SI_NPC_SILENCE,                 //기합
	SI_NPC_AURA_BLASTING,           //아우라의폭주
	SI_NPC_STRONG_MENACE,           //강력한위협
	SI_NPC_KILLING_SWORD,			//킬링 소드
	SI_NPC_SOUL_BLADE,				//소울 블레이드
	SI_NPC_SOUL_SWORD,				//소울 소드
	SI_NPC_SOUL_SWORD_ATTACK,				//소울 소드
	SI_NPC_GUNNAR_GRAND_DISILLUSION,	// 대각성
	SI_NPC_PREVENTION_CASTING,			// 프리벤션캐스팅
	SI_NPC_ANTI_ARMOR, // 550       // 안티 아머
	SI_NPC_BLOODY_RECALL_1,         // 블러디 리콜1
	SI_NPC_KILLING_CLAW,            // 킬링 클로우
	SI_NPC_SUMMON_IMPACT_BREATH,    // 임팩트 브레스 소환
	SI_NPC_IMPACT_BREATH,           // 임팩트 브레스
	SI_NPC_BLOODY_RECALL_2,         // 블러디 리콜2
#ifdef _NEW_SKILL
	SI_NPC_AUTOMATIC_LASERGUN,
	SI_NPC_AUTOMATIC_RAILGUN,
#endif
};

enum SKILL_EVENT
{
	SKE_DODGE,	
	SKE_FATAL,
	SKE_DAMAGE,
	SKE_BLOCK,
};

enum EFFECT_PROTOCOL
{
	EP_NIL,
	EP_GUARDAURA,
	EP_PROTECTFROM_DAMAGE,
	EP_BUFF_HP,
	EP_BUFF_PP,
	EP_BUFF_SP,
	EP_INS_HP,
	EP_INS_PP,
	EP_INS_SP,
	EP_KILLLINE,
	EP_HEAL,
	EP_THORNS,
	EP_PARTY_TELEPORT,
	EP_DIVINEGRACE,
};


enum CHECKDATA_PROTOCOL
{
	CP_MOVERATE,  //b
	CP_RIDERATE,
};

enum RANK_PROTOCOL
{
	RP_POINT,
	RP_LEVELUP,
};

enum HOLE_PROTOCOL
{
	HP_DOGRANKLIST,   //bwwwb sbbdw  HP_DOGRANKLIST, rank, kill, death, num,    name, level, aura, kill, rank
	HP_DOGTARGETDATA, //bdb  HP_DOGTARGETDATA, TargetId, death
	HP_DOGTIME,       //bw  HP_DOGTIME, htime
	HP_DOGGROUP,      //bbbb  HP_DOGMONGROUP, group1, group2, group3
};

enum CRAFT_TECH_CLASS
{
	//TECH
	CTC_NIL,
	CTC_SWORD,
	CTC_GUN,
	CTC_HEAVYARMOR,
	CTC_LIGHTARMOR,
	CTC_ALCHEMY,
};

enum CRAFT_PROTOCOL
{
	//TECH
	CP_INSERT_TECH,  //bww  CP_INSERT_TECH, index, exp
	CP_DELETE_TECH,  //bw   CP_DELETE_TECH, index
	CP_UPDATE_TECH,  //bww  CP_UPDATE_TECH, index, exp
	CP_LEARN_TECH,   //bdw  CP_LEARN_TECH, npcid, index

	//PLAN
	CP_INSERT_PLAN,  //bw   CP_INSERT_PLAN, index
	CP_DELETE_PLAN,  //bw   CP_DELETE_PLAN, index
	CP_MAKE_PLAN,    //bdw   CP_MAKE_PLAN, npcid, index
};

enum UNDERWORLD_PROTOCOL
{
	UWP_LOAD,
	UWP_CHANGE_OWNER,
	UWP_REGISTER_CAND,
	UWP_REMOVE_CAND,
	UWP_CLEAR_CAND,
};

enum UNDERWORLD_CHANGE_OWNER_STATUS
{
	UCOS_DEFENSE,
	UCOS_1_CAND,
	UCOS_2_CANDS,
	UCOS_OFFENSE
};

enum SCRAMBLE_PROTOCOL
{
	SCP_ENTER,				// 스크램블 입장
	SCP_CHALLENGE,			// 스크램블 전쟁 참가
	SCP_CHALLENGE_INFO,		// 스크램블 전쟁 참가
	SCP_CHALLENGE_GP,		// 스크램블 전쟁 참가
	SCP_CHALLENGE_RESULT,	// 스크램블 전쟁 참가
	SCP_VIEW,				// 스크램블 현황 보기
	SCP_VIEW_RESULT,			// 스크램블 현황 보기
	SCP_RESURRECT,			// 스크램블 부활 요청
	SCP_OCCUPY,						// 거점 점령 시도
	SCP_OCCUPY_INFO,				// 거점 점령 시도
	SCP_OCCUPY_CLOSE,				// 거점 점령 시도
	SCP_OCCUPY_RESULT,				// 거점 점령 시도
	SCP_INFO,				// 거점 정보
	SCP_CANCEL_CHALLENGE,			// 스크램블 참가 취소
	SCP_WAR_BEGIN,			// 전쟁 시작
	SCP_WAR_END,			// 전쟁 시작
	SCP_CORE_INFO,			// 코어 정보
};

enum SKILL_EXECUTE_FLAG
{
	SEF_SUCCESS = 0x01,
};


enum DAMAGE_FLAG
{
	DF_FATAL  = 0x01,
	DF_RELAY  = 0x02,
	DF_FINISH = 0x04,
	DF_BLOCK  = 0x08,

	DFH_DAMAGE_ON = 0x00010000,
};

enum MOVEFORCE_FLAG
{
	MFF_PRESS,
	MFF_SNATCH,
};

enum ETC_PROTOCOL
{
	ETCP_REVIVAL,         //bb ETCP_REVIVAL, Num
	ETCP_LOC_ERROR,
	ETCP_REVIVAL_CUR,     //bb ETCP_REVIVAL_CUR, Num
	ETCP_ASK_REVIVAL,     //bd ETCP_ASK_REVIVAL, Exp
	ETCP_ASK_REVIVAL_CUR, //bd ETCP_ASK_REVIVAL_CUR, Exp
	ETCP_PROLOGUE_END,
	ETCP_NEWPC,
	ETCP_NXSHOPROOT,
	//ETCP_QUITATTACK,	// d id
	ETCP_CALL_OKCANCEL = 9,	// bs (ok 1, cancel 0), chrName
	ETCP_GOTO,			// s chrName
	ETCP_CHAT_ALL,		// s message
	ETCP_CHANGE_CHRNAME, // s chrName
	ETCP_CHANGE_GENDER, // b
	ETCP_ASK_REVIVAL_EXP_RESTORE,  //bd ETCP_ASK_REVIVAL_EXP_RESTORE, Exp
	ETCP_REVIVAL_EXP_RESTORE, //bb ETCP_REVIVAL_EXP_RESTORE, Num
	ETCP_INIT_SPEC,     //db npcid ans(ok 1, cancel 0)
};

enum REVIVAL_TYPE
{
	RT_NIL = 0,
	RT_BIND,
	RT_CUR,
	RT_POSITION,
	RT_HELLION_BIND,

	RT_SKILL_REBIRTH = 1,
	RT_SKILL_REBIRTH2,
};

enum ACTIONCANCEL_TYPE
{
	ACT_NIL = 0,
	ACT_MOVE,
	ACT_DAMAGE,
};

enum GUILD_AUTHORITY_FLAG
{
	GAF_INVITE		= 0x0000000000000001,	// 길드원 초대
	GAF_PURGE		= 0x0000000000000002,		// 길드원 추방
	GAF_MESSAGE		= 0x0000000000000004,	// 길드 메시지
	GAF_MANDATE		= 0x0000000000000008,	// 권한 위임
	GAF_ENTER_AGIT	= 0x0000000000000010,	// 아지트 출입
	GAF_UNDERWORLD	= 0x0000000000000020,	// 언더월드 출입
	GAF_MANAGE_AGIT	= 0x0000000000000040,	// 아지트 관리
	GAF_RESOURCE	= 0x0000000000000080,	// 자원 채집
	GAF_WAREHOUSE	= 0x0000000000000100,	// 길드창고 이용
	GAF_TRAP		= 0x0000000000000200,	// 트랩 설치
	GAF_AUTHORITY	= 0x0000000000000400,	// 등급 설정
	GAF_USE_NB_BUFF	= 0x0000000000000800,	// 뉴비 버프 사용가능

	// 최초 등급별 기본 권한
	GAF_DEFAULT_RANK1	= 0x0000000000000000, // 신입
	GAF_DEFAULT_RANK2	= GAF_ENTER_AGIT | GAF_UNDERWORLD | GAF_WAREHOUSE, // 일반
	GAF_DEFAULT_RANK3	= GAF_ENTER_AGIT | GAF_UNDERWORLD | GAF_MANAGE_AGIT | GAF_RESOURCE | 
							GAF_WAREHOUSE, // 우수
	GAF_DEFAULT_RANK4	= GAF_MESSAGE | GAF_ENTER_AGIT | GAF_UNDERWORLD | GAF_MANAGE_AGIT | 
							GAF_RESOURCE | GAF_WAREHOUSE | GAF_TRAP, // 관리자
	GAF_DEFAULT_RANK5	= GAF_INVITE | GAF_PURGE | GAF_MESSAGE | GAF_MANDATE | 
							GAF_ENTER_AGIT | GAF_UNDERWORLD | GAF_MANAGE_AGIT | GAF_RESOURCE | 
							GAF_WAREHOUSE | GAF_TRAP | GAF_AUTHORITY | GAF_USE_NB_BUFF, // 길마
};

enum LOGIN_CHECK_TYPE
{
	LCT_WRONG_ID,
	LCT_LOGIN,
	LCT_LOGOFF,
	LCT_NOTEXIST
};

enum ITEM_RESULT_TYPE
{
	IRT_ENCHANT = 1,
	IRT_CRAFT,
};

enum ITEM_RESULT_SUB_TYPE
{
	IRST_ENCHANT_SUCCESS = 1,
	IRST_ENCHANT_FAIL,	
	IRST_ENCHANT_FAIL_MINUS_1,
	IRST_ENCHANT_FAIL_MINUS_2,	

	IRST_CRAFT_SUCCESS = 1,
	IRST_CRAFT_SUCCESS_LUXURY,
	IRST_CRAFT_FAIL,	
};

enum INIT_SPEC_FROM
{
	ISF_EVENT,
	ISF_PAY_ITEM,
};

enum REINFORCEMENT_TYPE
{
	RIFMTT_1 = 1, // fail -2
	RIFMTT_2,     // fail -0
};

// Underworld Point State
#define UPS_CORE			    0x00000001	// 0
#define UPS_FLAG_1			    0x00000002
#define UPS_FLAG_2			    0x00000004
#define UPS_FLAG_3				0x00000008
#define UPS_FLAG_4				0x00000010
#define UPS_FLAG_5				0x00000020
#define UPS_FLAG_6				0x00000040
#define UPS_FLAG_7				0x00000080
#define UPS_FLAG_8				0x00000100
#define UPS_FLAG_9				0x00000200
#define UPS_FLAG_10				0x00000400	// 10
#define UPS_FLAG_11				0x00000800
#define UPS_FLAG_12				0x00001000
#define UPS_FLAG_13				0x00002000
#define UPS_FLAG_14				0x00004000
#define UPS_FLAG_15				0x00008000
#define UPS_FLAG_16				0x00010000
#define UPS_FLAG_17				0x00020000
#define UPS_FLAG_18				0x00040000
#define UPS_FLAG_19				0x00080000
#define UPS_FLAG_20				0x00100000	// 20
#define UPS_FLAG_21				0x00200000
#define UPS_FLAG_22				0x00400000
#define UPS_FLAG_23				0x00800000
#define UPS_FLAG_24				0x01000000
#define UPS_FLAG_25				0x02000000
#define UPS_FLAG_26				0x04000000
#define UPS_FLAG_27				0x08000000
#define UPS_FLAG_28				0x10000000
#define UPS_FLAG_29				0x20000000
#define UPS_FLAG_30				0x40000000	// 30
#define UPS_FLAG_31				0x80000000

enum
{
	UWC_TIME_CORE = 3 * MSEC_PER_MIN,
	UWC_TIME_FLAG = 15 * MSEC_PER_SEC,
};

enum UW_POINT_INDEX
{
	UWPI_CORE = 0,
	UWPI_FLAG_MIN,
	UWPI_FLAG_1 = UWPI_FLAG_MIN,
	UWPI_FLAG_2,
	UWPI_FLAG_3,
	UWPI_FLAG_4,
	UWPI_FLAG_5,
	UWPI_FLAG_6,
	UWPI_FLAG_7,
	UWPI_FLAG_8,
	UWPI_FLAG_9,
	UWPI_FLAG_10,
	UWPI_FLAG_11,
	UWPI_FLAG_12,
	UWPI_FLAG_13,
	UWPI_FLAG_14,
	UWPI_FLAG_15,
	UWPI_FLAG_16,
	UWPI_FLAG_17,
	UWPI_FLAG_18,
	UWPI_FLAG_19,
	UWPI_FLAG_20,
	UWPI_FLAG_21,
	UWPI_FLAG_22,
	UWPI_FLAG_23,
	UWPI_FLAG_24,
	UWPI_FLAG_25,
	UWPI_FLAG_26,
	UWPI_FLAG_27,
	UWPI_FLAG_28,
	UWPI_FLAG_29,
	UWPI_FLAG_30,
	UWPI_FLAG_31,
	UWPI_FLAG_MAX = UWPI_FLAG_31,
	UWPI_AGIT = 255,
	UWPI_INVALID = 0xffff,
};

enum SYS_EVENT_CODE_PROTOCOL
{
	SECP_SYS,
	SECP_EVENT,
};

#ifdef _NEW_SKILL
enum SLAVE_TYPE
{
	SLAVETYPE_MINE = 1,
	SLAVETYPE_AUTOMATIC,
};
#endif


